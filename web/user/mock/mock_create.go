// Code generated by MockGen. DO NOT EDIT.
// Source: ../user/create.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	entity "github.com/faceit/test/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockcreate is a mock of create interface
type Mockcreate struct {
	ctrl     *gomock.Controller
	recorder *MockcreateMockRecorder
}

// MockcreateMockRecorder is the mock recorder for Mockcreate
type MockcreateMockRecorder struct {
	mock *Mockcreate
}

// NewMockcreate creates a new mock instance
func NewMockcreate(ctrl *gomock.Controller) *Mockcreate {
	mock := &Mockcreate{ctrl: ctrl}
	mock.recorder = &MockcreateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockcreate) EXPECT() *MockcreateMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *Mockcreate) Create(ctx context.Context, u entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, u)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockcreateMockRecorder) Create(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Mockcreate)(nil).Create), ctx, u)
}

// Mocknotifier is a mock of notifier interface
type Mocknotifier struct {
	ctrl     *gomock.Controller
	recorder *MocknotifierMockRecorder
}

// MocknotifierMockRecorder is the mock recorder for Mocknotifier
type MocknotifierMockRecorder struct {
	mock *Mocknotifier
}

// NewMocknotifier creates a new mock instance
func NewMocknotifier(ctrl *gomock.Controller) *Mocknotifier {
	mock := &Mocknotifier{ctrl: ctrl}
	mock.recorder = &MocknotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mocknotifier) EXPECT() *MocknotifierMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *Mocknotifier) Add(message entity.NotifierMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", message)
}

// Add indicates an expected call of Add
func (mr *MocknotifierMockRecorder) Add(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*Mocknotifier)(nil).Add), message)
}
