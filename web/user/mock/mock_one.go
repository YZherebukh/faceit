// Code generated by MockGen. DO NOT EDIT.
// Source: ../user/one.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	entity "github.com/faceit/test/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockone is a mock of one interface
type Mockone struct {
	ctrl     *gomock.Controller
	recorder *MockoneMockRecorder
}

// MockoneMockRecorder is the mock recorder for Mockone
type MockoneMockRecorder struct {
	mock *Mockone
}

// NewMockone creates a new mock instance
func NewMockone(ctrl *gomock.Controller) *Mockone {
	mock := &Mockone{ctrl: ctrl}
	mock.recorder = &MockoneMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockone) EXPECT() *MockoneMockRecorder {
	return m.recorder
}

// One mocks base method
func (m *Mockone) One(ctx context.Context, id int) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One
func (mr *MockoneMockRecorder) One(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*Mockone)(nil).One), ctx, id)
}
