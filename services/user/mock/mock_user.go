// Code generated by MockGen. DO NOT EDIT.
// Source: ../user/user.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	entity "github.com/faceit/test/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockclient is a mock of client interface
type Mockclient struct {
	ctrl     *gomock.Controller
	recorder *MockclientMockRecorder
}

// MockclientMockRecorder is the mock recorder for Mockclient
type MockclientMockRecorder struct {
	mock *Mockclient
}

// NewMockclient creates a new mock instance
func NewMockclient(ctrl *gomock.Controller) *Mockclient {
	mock := &Mockclient{ctrl: ctrl}
	mock.recorder = &MockclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockclient) EXPECT() *MockclientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *Mockclient) Create(ctx context.Context, u entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, u)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockclientMockRecorder) Create(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Mockclient)(nil).Create), ctx, u)
}

// Update mocks base method
func (m *Mockclient) Update(ctx context.Context, u entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockclientMockRecorder) Update(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*Mockclient)(nil).Update), ctx, u)
}

// Delete mocks base method
func (m *Mockclient) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockclientMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockclient)(nil).Delete), ctx, id)
}

// One mocks base method
func (m *Mockclient) One(ctx context.Context, id int) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One
func (mr *MockclientMockRecorder) One(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*Mockclient)(nil).One), ctx, id)
}

// All mocks base method
func (m *Mockclient) All(ctx context.Context) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *MockclientMockRecorder) All(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*Mockclient)(nil).All), ctx)
}

// AllByCountry mocks base method
func (m *Mockclient) AllByCountry(ctx context.Context, iso2 string) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllByCountry", ctx, iso2)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllByCountry indicates an expected call of AllByCountry
func (mr *MockclientMockRecorder) AllByCountry(ctx, iso2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllByCountry", reflect.TypeOf((*Mockclient)(nil).AllByCountry), ctx, iso2)
}

// AllWithFilter mocks base method
func (m *Mockclient) AllWithFilter(ctx context.Context, title, filter string) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithFilter", ctx, title, filter)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithFilter indicates an expected call of AllWithFilter
func (mr *MockclientMockRecorder) AllWithFilter(ctx, title, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithFilter", reflect.TypeOf((*Mockclient)(nil).AllWithFilter), ctx, title, filter)
}

// Mockhasher is a mock of hasher interface
type Mockhasher struct {
	ctrl     *gomock.Controller
	recorder *MockhasherMockRecorder
}

// MockhasherMockRecorder is the mock recorder for Mockhasher
type MockhasherMockRecorder struct {
	mock *Mockhasher
}

// NewMockhasher creates a new mock instance
func NewMockhasher(ctrl *gomock.Controller) *Mockhasher {
	mock := &Mockhasher{ctrl: ctrl}
	mock.recorder = &MockhasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockhasher) EXPECT() *MockhasherMockRecorder {
	return m.recorder
}

// HashAndSalt mocks base method
func (m *Mockhasher) HashAndSalt(password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashAndSalt", password)
	ret0, _ := ret[0].(error)
	return ret0
}

// HashAndSalt indicates an expected call of HashAndSalt
func (mr *MockhasherMockRecorder) HashAndSalt(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashAndSalt", reflect.TypeOf((*Mockhasher)(nil).HashAndSalt), password)
}

// Salt mocks base method
func (m *Mockhasher) Salt() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Salt")
	ret0, _ := ret[0].(string)
	return ret0
}

// Salt indicates an expected call of Salt
func (mr *MockhasherMockRecorder) Salt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Salt", reflect.TypeOf((*Mockhasher)(nil).Salt))
}

// Hashed mocks base method
func (m *Mockhasher) Hashed() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hashed")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hashed indicates an expected call of Hashed
func (mr *MockhasherMockRecorder) Hashed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hashed", reflect.TypeOf((*Mockhasher)(nil).Hashed))
}
