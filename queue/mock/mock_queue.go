// Code generated by MockGen. DO NOT EDIT.
// Source: ../queue/queue.go

// Package mock_queue is a generated GoMock package.
package mock_queue

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mocknotifier is a mock of notifier interface
type Mocknotifier struct {
	ctrl     *gomock.Controller
	recorder *MocknotifierMockRecorder
}

// MocknotifierMockRecorder is the mock recorder for Mocknotifier
type MocknotifierMockRecorder struct {
	mock *Mocknotifier
}

// NewMocknotifier creates a new mock instance
func NewMocknotifier(ctrl *gomock.Controller) *Mocknotifier {
	mock := &Mocknotifier{ctrl: ctrl}
	mock.recorder = &MocknotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mocknotifier) EXPECT() *MocknotifierMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *Mocknotifier) Do(ctx context.Context, message interface{}, consumers []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Do", ctx, message, consumers)
}

// Do indicates an expected call of Do
func (mr *MocknotifierMockRecorder) Do(ctx, message, consumers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*Mocknotifier)(nil).Do), ctx, message, consumers)
}
